{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_this","Object","_Users_cn0105_Desktop_react_folder_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_cn0105_Desktop_react_folder_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_cn0105_Desktop_react_folder_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","onClick","button","calculate","reset","setState","result","state","eval","e","backspace","slice","react__WEBPACK_IMPORTED_MODULE_5___default","className","ResultComponent","KeyPadComponent","buttons","Component","_ref","props","map","buttonVal","name","id","target"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,8pCE9HbR,yBACJ,SAAAA,MAAa,IAAAS,MAAA,OAAAC,OAAAC,iIAAA,EAAAD,CAAAE,KAAAZ,KACXS,MAAAC,OAAAG,4IAAA,EAAAH,CAAAE,KAAAF,OAAAI,iIAAA,EAAAJ,CAAAV,KAAAe,KAAAH,OADWH,MAQbO,QAAU,SAAAC,GACM,MAAXA,EACDR,MAAKS,YACc,UAAXD,EACRR,MAAKU,QAELV,MAAKW,SAAS,CACZC,OAAQZ,MAAKa,MAAMD,OAASJ,KAfrBR,MAoBbS,UAAY,WACV,IACET,MAAKW,SAAS,CACpBC,QAASE,KAAKd,MAAKa,MAAMD,SAAW,IAAM,KAEpC,MAAOG,GACPf,MAAKW,SAAS,CACZC,OAAQ,YA3BDZ,MAgCbU,MAAQ,WACNV,MAAKW,SAAS,CACZC,OAAQ,MAlCCZ,MAsCbgB,UAAY,WACVhB,MAAKW,SAAS,CACZC,OAAQZ,MAAKa,MAAMD,OAAOK,MAAM,GAAI,MArCtCjB,MAAKa,MAAQ,CACXD,OAAQ,IAJCZ,8UA+CX,OACEkB,2CAAA7B,EAAAC,cAAA,WACE4B,2CAAA7B,EAAAC,cAAA,OAAK6B,UAAU,mBACbD,2CAAA7B,EAAAC,cAAC8B,gBAAD,CAAiBR,OAAQT,KAAKU,MAAMD,SACpCM,2CAAA7B,EAAAC,cAAC+B,gBAAD,CAAiBF,UAAU,SAASZ,QAASJ,KAAKI,QAASe,QAL/C,CAAC,QAAS,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,kBA/C/EC,8CA2DZH,gBAAkB,SAAAI,GAAgB,IAAbZ,EAAaY,EAAbZ,OACzB,OACEM,2CAAA7B,EAAAC,cAAA,OAAK6B,UAAU,UACbD,2CAAA7B,EAAAC,cAAA,KAAG6B,UAAU,cAAcP,KAK3BS,gBAAkB,SAAAI,GAAK,OAC3BP,2CAAA7B,EAAAC,cAAA,OAAK6B,UAAU,UAEXM,EAAMH,QAAQI,IAAI,SAAAC,GAChB,OAAOT,2CAAA7B,EAAAC,cAAA,UAAQsC,KAAMD,EAAWE,GAAI,SAAWF,EAAWpB,QAAS,SAAAQ,GAAC,OAAIU,EAAMlB,QAAQQ,EAAEe,OAAOF,QAAQD,OAMhGpC","file":"static/js/main.bb2dee51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\nimport './App.css';\n// import ResultComponent from './components/ResultComponent'\n// import KeyPadComponent from './components/KeypadComponent'\n\nclass App extends Component {\n  constructor(){\n    super()\n\n    this.state = {\n      result: \"\"\n    }\n  }\n\n  onClick = button => {\n    if(button === \"=\"){\n      this.calculate()\n    } else if(button === \"Clear\"){\n      this.reset()\n    } else {\n      this.setState({\n        result: this.state.result + button\n      })\n    }\n  }\n\n  calculate = () => {\n    try {\n      this.setState({\nresult: (eval(this.state.result) || \"\") + \"\"\n      })\n    } catch (e) {\n      this.setState({\n        result: \"error\"\n      })\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      result: \"\"\n    })\n  }\n\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice(0, -1)\n    })\n  }\n\n\n  render() {\n    const buttonArr = [\"Clear\", \"+\", \"-\", \"1\", \"2\", \"3\", \"*\", \"4\", \"5\", \"6\", \"/\", \"7\", \"8\", \"9\", \"=\"]\n    return (\n      <div>\n        <div className=\"calculator-body\">\n          <ResultComponent result={this.state.result}/>\n          <KeyPadComponent className=\"button\" onClick={this.onClick} buttons={buttonArr}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst ResultComponent = ({ result }) => {\n  return (\n    <div className=\"result\">\n      <p className=\"resultText\">{result}</p>\n    </div>\n  )\n}\n\nconst KeyPadComponent = props => (\n  <div className=\"button\">\n    {\n      props.buttons.map(buttonVal => {\n        return <button name={buttonVal} id={\"button\" + buttonVal} onClick={e => props.onClick(e.target.name)}>{buttonVal}</button>\n      })\n    }\n  </div>\n)\n\nexport default App;\n"],"sourceRoot":""}